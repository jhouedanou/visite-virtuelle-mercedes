<krpano>
	
	<!-- krpano 3D Gaussian Splatting - Shader Demo -->
	
	<set var="splatspath" val="'https://krpano.com/examples/gsplats'" />
	
	<include url="contextmenu3d.xml" />
	<include url="%VIEWER%/plugins/webvr.xml" />
	<include url="%VIEWER%/plugins/iphone_fullscreen_swipe.xml" />
	<include url="%VIEWER%/plugins/controls3d.xml" />
	<include url="%VIEWER%/plugins/vr_and_anaglyph_buttons.xml" />
	
	<!-- adjust the joypad position depending on the screen size to avoid overlapping UI -->
	<layer name="joypad" oy="link:stagewidth:stagewidth LT 560 ? -40 : 0" />
	<layer name="joypad_levelcontrol" oy="link:stagewidth:stagewidth LT 560 ? -40 : 0" />

	
	<include url="splattools.xml" />

	<!-- perf opt: use a lower rendering resolution on hi-dpi mobile/tablet devices -->
	<display framebufferscale="calc:max(0.66,1.0 / device.pixelratio)" devices="mobile.or.tablet" />
	
	<webvr postracking="true" webvr_foveationlevel="3" />
	<view fovtype="VFOV" vfov="120" />
	<display depthbuffer="true" depthnear="1" depthfar="1000000" />
	
	<action name="startup" autorun="onstart">
		if(startscene === null OR !scene[get(startscene)], copy(startscene,scene[0].name); );
		loadscene(get(startscene));
	</action>
	
	<style name="infolink"
		type="text"
		css="font-size:12px; font-style:italic; color:#FFFFFF;"
		bg="false"
		txtshadow="0 1 1 0, 1 0 1 0"
		align="leftbottom"
		zorder="10"
		/>
		
	<include url="%VIEWER%/plugins/combobox.xml" />
	<combobox name="cbscenes" design="splattools" align="bottom" x.mobile="10" y="26"
		onloaded="forall(scene, s, addnameditem(get(s.name), (s.title ? s.title : s.name), ('loadscene('+s.name+',null,MERGE,BLEND(0.5))') )); selectitembyname(get(xml.scene));"
		/>
	
	
	<scene name="unveileffects" title="Unveil Effects">
		
		<view hlookat="0" vlookat="0" tx="0" ty="0" tz="0" oz="0" fov="120" />
		
		<image vrfloorlevel="160">
			<splats
				url="%$splatspath%/central2_splat3_1_00.compressed_copyright.ply"
				scale="0.62"
				tx="233.2" ty="183.7" tz="145.1"
				rx="0" ry="64.3" rz="0"
				shader="get:data[splats_unveil_shader_default].content"
				unveil_range="2500"
				unveil_blendrange="200"
				unveil_time.number="3.0"
				unveil_progress="0"
				antialias="link:unveil_progress:mix(1.0,0.3,unveil_progress)"
				onloaded="tween(unveil_progress,1,get(image.splats.unveil_time),smoother, layer[playbutton].text='Play'; );"
				/>
		</image>
		
		
		<layer name="unveileffects" style="link:window" align="bottom" y="80" width="170" zorder="2">
			<layer style="panel">
				<layer style="link:subtitle" text="Unveil Effects" />
				<layer style="control" 
					currenteffect=""
					template="Effect: [span style='color:#FFFF00;']{{currenteffect:replace(substr(currenteffect,20),'_',' ')}}[/span]" 
					onloaded="build_effect_control();"
					/>
				
				<action name="build_effect_control">
					onclick = 'switch(currenteffect';
					forall(data,d,
						if(contains(d.name,'splats_unveil_shader'),
							onclick += ',' + d.name;
							if(d.content == image.splats.shader, currenteffect = d.name; );
						);
					);
					onclick += ');';
					onclick += 'image.splats.shader = data[get(currenteffect)].content;';
					onclick += 'layer[playbutton].text = "Play"; image.splats.unveil_progress = 0; callwith(layer[playbutton], onclick() );';
				</action>
					
				<layer style="dragcontrol" value="image.splats.unveil_range" dragscale="10" valuemin="0.0" valuereset="4000" template="Range: {{image.splats.unveil_range:roundval(image.splats.unveil_range)}}" />
				<layer style="dragcontrol" value="image.splats.unveil_blendrange" dragscale="4" valuemin="0.0" valuereset="500" template="Blendrange: {{image.splats.unveil_blendrange:roundval(image.splats.unveil_blendrange)}}" />
				<layer style="dragcontrol" value="image.splats.unveil_time" dragscale="0.1" valuemin="0.5" valuereset="3" template="Duration: {{image.splats.unveil_time:roundval(image.splats.unveil_time,-1)}}" />
				<layer style="dragcontrol" value="image.splats.unveil_progress" valuemin="0.0" valuemax="1" valuereset="0" template="Progress: {{image.splats.unveil_progress:roundval(image.splats.unveil_progress,-3)}}" ondown="stoptween(image.splats.unveil_progress); layer[playbutton].text='Play';" />
				<layer name="playbutton" style="control" text="Pause" onclick="playbutton_onclick()" />
				
				<action name="playbutton_onclick">
					if(text == 'Pause',
						text = 'Play';
						stoptween(image.splats.unveil_progress);
					  ,
						text = 'Pause';
						if(image.splats.unveil_progress GT 0.9,
							image.splats.unveil_progress = 0;
						);
						tween(image.splats.unveil_progress,1,('distance(1,'+image.splats.unveil_time+')'),smoother, 
							text = 'Play';
						);
					);
				</action>

			</layer>
		</layer>


		<data name="splats_unveil_shader_default"><![CDATA[

			uniform float unveil_range;
			uniform float unveil_blendrange;
			uniform float unveil_progress;
				
			void splatshader (inout vec4 pos, inout mat3 mx, inout vec4 color)
			{
				// distance from the world/model center
				float d = length(pos.xyz);
				
				// distance-based blend factor
				float blend = 1.0 - clamp((d - unveil_progress * (unveil_range + unveil_blendrange) + unveil_blendrange) / unveil_blendrange, 0.0, 1.0);
				
				// scale the splats, but not to zero
				mx *= max(blend, 0.000001);
			}
			
		]]></data>
		
		<data name="splats_unveil_shader_with_light_effect"><![CDATA[

			uniform float unveil_range;
			uniform float unveil_blendrange;
			uniform float unveil_progress;
				
			void splatshader (inout vec4 pos, inout mat3 mx, inout vec4 color)
			{
				// distance from the world/model center
				float d = length(pos.xyz);
				
				// distance-based blend factor
				float blend = 1.0 - clamp((d - unveil_progress * (unveil_range + unveil_blendrange) + unveil_blendrange) / unveil_blendrange, 0.0, 1.0);
				
				// scale the splats, but not to zero
				mx *= max(blend, 0.000001);
				
				// add an light effect at the unveil edge
				float effect = exp(-pow(abs((d / unveil_range) - unveil_progress) / 0.01, 2.0));
				color.rgb += effect * vec3(1.0,1.0,1.0);
			}
			
		]]></data>
		
		<data name="splats_unveil_shader_with_rainbow_effect"><![CDATA[

			uniform float unveil_range;
			uniform float unveil_blendrange;
			uniform float unveil_progress;
			
			vec3 hue2rgb (float h)
			{
				h = mod(h, 1.0);
				float r = abs(h * 6.0 - 3.0) - 1.0;
				float g = 2.0 - abs(h * 6.0 - 2.0);
				float b = 2.0 - abs(h * 6.0 - 4.0);
				return clamp(vec3(r,g,b), 0.0, 1.0);
			}
				
			void splatshader (inout vec4 pos, inout mat3 mx, inout vec4 color)
			{
				// distance from the world/model center
				float d = length(pos.xyz);
				
				// distance-based blend factor
				float blend = 1.0 - clamp((d - unveil_progress * (unveil_range + unveil_blendrange) + unveil_blendrange) / unveil_blendrange, 0.0, 1.0);
				
				// scale the splats, but not to zero
				mx *= max(blend, 0.000001);
				
				// add an rainbow-light effect at the unveil edge
				float effect = exp(-pow(abs((d / unveil_range) - unveil_progress) / 0.01, 2.0));
				color.rgb += effect * 1.5 * hue2rgb((d / unveil_range) * 10.0);
			}
			
		]]></data>
		
		<data name="splats_unveil_shader_dark_to_light"><![CDATA[

			uniform float unveil_range;
			uniform float unveil_blendrange;
			uniform float unveil_progress;
				
			void splatshader (inout vec4 pos, inout mat3 mx, inout vec4 color)
			{
				// distance from the world/model center
				float d = length(pos.xyz);
				
				// distance-based blend factor
				float blend = 1.0 - clamp((d - unveil_progress * (unveil_range + unveil_blendrange) + unveil_blendrange) / unveil_blendrange, 0.0, 1.0);
				
				// blend from dark-grayscale
				float y = color.r * 0.299 + color.g * 0.587 + color.b * 0.114; 
				color.rgb = mix(vec3(0.3 * y), color.rgb, blend);
			}
			
		]]></data>
		
		<data name="splats_unveil_shader_with_distortion"><![CDATA[

			uniform float unveil_range;
			uniform float unveil_blendrange;
			uniform float unveil_progress;
			
			vec3 hue2rgb (float h)
			{
				h = mod(h, 1.0);
				float r = abs(h * 6.0 - 3.0) - 1.0;
				float g = 2.0 - abs(h * 6.0 - 2.0);
				float b = 2.0 - abs(h * 6.0 - 4.0);
				return clamp(vec3(r,g,b), 0.0, 1.0);
			}
				
			void splatshader (inout vec4 pos, inout mat3 mx, inout vec4 color)
			{
				// distance from the world/model center
				float d = length(pos.xyz);
				
				// distance-based blend factor
				float blend = 1.0 - clamp((d - unveil_progress * (unveil_range + unveil_blendrange) + unveil_blendrange) / unveil_blendrange, 0.0, 1.0);
				
				// scale the splats, but not to zero
				mx *= max(blend, 0.000001);
				
				// add an arbitrary distortion 
				float effect = exp(-pow(abs((d / unveil_range) - unveil_progress) / 0.04, 2.0));
				pos.xyz += -100.0 * effect * normalize(pos.zxy);
			}
			
		]]></data>
		
		<layer style="infolink" text="Model provided by [a href='https://www.360images.fr/' target='_blank']360images.fr[/a]" />
		
	</scene>
	
	
	<scene name="lighteffects" title="Light Effects">
		
		<view hlookat="0" vlookat="0" tx="0" ty="0" tz="0" oz="0" fov="120" />
		
		<image vrfloorlevel="160">
			<splats
				url="%$splatspath%/central2_splat3_1_00.compressed_copyright.ply"
				scale="0.62"
				tx="233.2" ty="183.7" tz="145.1"
				rx="0" ry="64.3" rz="0"
				shader="get:data[splats_light_effect].content"
				light_x="link:view.tx"
				light_y="link:view.ty"
				light_z="link:view.tz"
				light_range="250"
				light_falloff="50"
				light_darklevel="0.3"
				/>
		</image>
		
		<data name="splats_light_effect"><![CDATA[

			uniform float light_x, light_y, light_z;
			uniform float light_range;
			uniform float light_falloff;
			uniform float light_darklevel;
				
			void splatshader (inout vec4 pos, inout mat3 mx, inout vec4 color)
			{
				// distance splat to the light
				float d = length(pos.xyz - vec3(light_x, light_y, light_z));
				
				// fadeout factor
				float fadeout = clamp((d - light_range) / light_falloff, 0.0, 1.0);
				
				// blend from dark-grayscale
				float y = color.r * 0.299 + color.g * 0.587 + color.b * 0.114; 
				color.rgb = mix(color.rgb, vec3(light_darklevel * y), fadeout);
			}
			
		]]></data>
		
		<set var="lightfollow" val="true" />
		
		<layer name="lighteffects" style="link:window" align="bottom" y="80" width="170" zorder="2">
			<layer style="panel">
				<layer style="link:subtitle" text="Light Effects" />
				<layer style="control" template="Follow: {{lightfollow}}" onclick="switch(lightfollow); setlightfollow( get(lightfollow) );" />
				
				<action name="setlightfollow" args="setfollow" scope="local">
					if(setfollow,
						lightfollow = true; 
						link(image.splats.light_x, view.tx); 
						link(image.splats.light_y, view.ty); 
						link(image.splats.light_z, view.tz);
					  ,
						lightfollow = false;
						unlink(image.splats.light_x);
						unlink(image.splats.light_y);
						unlink(image.splats.light_z);
					);
				</action>
					
				<layer style="dragcontrol" value="image.splats.light_x" dragscale="0.5" template="X: {{image.splats.light_x:roundval(image.splats.light_x,1)}}" ondown="setlightfollow(false);" />
				<layer style="dragcontrol" value="image.splats.light_y" dragscale="0.5" template="Y: {{image.splats.light_y:roundval(image.splats.light_y,1)}}" ondown="setlightfollow(false);" />
				<layer style="dragcontrol" value="image.splats.light_z" dragscale="0.5" template="Z: {{image.splats.light_z:roundval(image.splats.light_z,1)}}" ondown="setlightfollow(false);" />
				<layer style="dragcontrol" value="image.splats.light_range" dragscale="4" valuemin="0.0" valuereset="500" template="Range: {{image.splats.light_range:roundval(image.splats.light_range)}}" />
				<layer style="dragcontrol" value="image.splats.light_falloff" dragscale="4" valuemin="0.0" valuereset="100" template="Falloff: {{image.splats.light_falloff:roundval(image.splats.light_falloff)}}" />
				<layer style="dragcontrol" value="image.splats.light_darklevel" dragscale="0.01" valuemin="0.0" valuemax="1.0" valuereset="0.3" template="Darklevel: {{image.splats.light_darklevel:roundval(image.splats.light_darklevel,-2)}}" />
			</layer>
		</layer>
		
		<layer style="infolink" text="Model provided by [a href='https://www.360images.fr/' target='_blank']360images.fr[/a]" />
		
	</scene>
	
	
	<scene name="rgb_cube" title="Adjust (RGB Cube)">
			
		<control dollydistance="5.0" />
		<view hlookat="45" vlookat="33" tx="0" ty="0" tz="0" oz="1100" fov="100" />
		
		<image>
			<splats 
				url="rgb_cube.splat"
				shader="get:data[splats_adjust_shader].content"
				brightness="0.0"
				contrast="1.0"
				gamma="1.0"
				blacklevel="0.0"
				whitelevel="1.0"
				saturate="1.0"
				vibrance="0.0"
				intensity="1.0"
				temp="0.0"
				tint="0.0"
				alpha="1.0"
				splatscalex="1.0"
				splatscaley="1.0"
				splatscalez="1.0"
				/>
		</image>
		
		<data name="splats_adjust_shader"><![CDATA[
			
			uniform float splatscalex, splatscaley, splatscalez;
			uniform float brightness, contrast, gamma, blacklevel, whitelevel, saturate, vibrance, intensity;
			uniform float temp, tint;
			uniform float alpha;
			
			// CYT colorspace (by krpano): colortemperature(x) / luminance(y) / tint(z) 
			// - a rotated and scaled YUV colorspace: YUV => UYV + rotated and scaled UV:
			//   - the U(x) axis is for colortemperature changes
			//   - the Y(y) axis is for luminance changes
			//   - the V(z) axis is for tint changes
			// - note: the tint axis is scaled 0.5x of the colortemperature axis
			const mat3 rgb2cyt = mat3(2.295031, -0.745666, -1.549365, 0.299, 0.587, 0.114, 2.614040, -4.702415, 2.088374);
			const mat3 cyt2rgb = mat3(0.199272, 1.0, 0.093252, -0.036937, 1.0, -0.082049, -0.332435, 1.0, 0.177597);
			const mat3 skintones = mat3(1.76777, -3.53553, 0.02298, 1.76777, 3.53553, -2.19026, 0.0, 0.0, 0.0);
	
			void splatshader (inout vec4 pos, inout mat3 mx, inout vec4 color)
			{
				// convert to CYT colorspace: x=colortemperature, y=luminance, z=tint
				vec3 c = color.rgb * rgb2cyt;
				
				// adjust luminance
				c.y += brightness;
				c.y = (c.y - 0.5) * contrast + 0.5;
				c.y = pow(c.y, 1.0 / gamma);
				c.y += blacklevel * (1.0 - c.y)*(1.0 - c.y);
				c.y += (whitelevel - 1.0) * c.y*c.y;
				c.y *= intensity;
				
				// adjust colors
				c.xz *= max(0.0, saturate + vibrance * smoothstep(1.0, 3.0, length(vec3(c.xz,1) * skintones)) * smoothstep(0.0, 1.0, 1.0 - length(c.xz * vec2(0.4,0.2))));
				c.x += temp;
				c.z += tint;
			
				// convert back to RGB, and avoid negative color values (important for some GPUs)
				color.rgb = max(c * cyt2rgb, 0.0);

				// adjust alpha/transparency 
				color.a *= alpha;
				
				// adjust scale
				mx[0] *= splatscalex;
				mx[1] *= splatscaley;
				mx[2] *= splatscalez;
			}
			
		]]></data>
		
		<layer style="link:window" align="bottom" y="80" width="170" zorder="2">
			<layer style="panel">
				<layer style="link:subtitle" text="Adjust Splats" onclick="switch(image.splats.shader, '', get(data[splats_adjust_shader].content)); switch(bgcolor, get(splattools.accentcolor), get(splattools.bgcolor_button_ondown));" />
				
				<layer style="dragcontrol" value="image.splats.brightness" dragscale="0.002" valuemin="-1" valuemax="10" valuereset="0" template="Brightness: {{image.splats.brightness:roundval(image.splats.brightness,-3)}}" />
				<layer style="dragcontrol" value="image.splats.contrast" dragscale="0.002" valuemin="0.01" valuemax="100" valuereset="1" template="Contrast: {{image.splats.contrast:roundval(image.splats.contrast,-3)}}" />
				<layer style="dragcontrol" value="image.splats.gamma" dragscale="0.002" valuemin="0.01" valuemax="100" valuereset="1" template="Gamma: {{image.splats.gamma:roundval(image.splats.gamma,-3)}}" />
				<layer style="dragcontrol" value="image.splats.blacklevel" dragscale="0.002" valuemin="-1" valuemax="1" valuereset="0" template="blacklevel: {{image.splats.blacklevel:roundval(image.splats.blacklevel,-3)}}" />
				<layer style="dragcontrol" value="image.splats.whitelevel" dragscale="0.002" valuemin="-1" valuemax="2" valuereset="1" template="whitelevel: {{image.splats.whitelevel:roundval(image.splats.whitelevel,-3)}}" />
				<layer style="dragcontrol" value="image.splats.intensity" dragscale="0.002" valuemin="0.01" valuemax="10" valuereset="1" template="Intensity: {{image.splats.intensity:roundval(image.splats.intensity,-3)}}" />
				
				<layer style="dragcontrol" value="image.splats.saturate" dragscale="0.002" valuemin="0.0" valuemax="2" valuereset="1" template="Saturate: {{image.splats.saturate:roundval(image.splats.saturate,-3)}}" />
				<layer style="dragcontrol" value="image.splats.vibrance" dragscale="0.002" valuemin="-2.0" valuemax="+2.0" valuereset="0" template="Vibrance: {{image.splats.vibrance:roundval(image.splats.vibrance,-3)}}" />
				<layer style="dragcontrol" value="image.splats.temp" dragscale="0.002" valuemin="-1" valuemax="+1" valuereset="0" template="Temperature: {{image.splats.temp:(image.splats.temp GT 0 ? '+' : '') + roundval(image.splats.temp,-2)}}" />
				<layer style="dragcontrol" value="image.splats.tint" dragscale="0.002" valuemin="-1" valuemax="+1" valuereset="0" template="Tint: {{image.splats.tint:(image.splats.tint GT 0 ? '+' : '') + roundval(image.splats.tint,-2)}}" />
				
				<layer style="dragcontrol" value="image.splats.alpha" dragscale="0.002" valuemin="0.01" valuemax="1" valuereset="1" template="Alpha: {{image.splats.alpha:roundval(image.splats.alpha,-3)}}" />
				<layer style="dragcontrol" value="image.splats.splatscalex" valuemin="0.01" valuemax="10" valuereset="1" template="Scale X: {{image.splats.splatscalex:roundval(image.splats.splatscalex,-3)}}" />
				<layer style="dragcontrol" value="image.splats.splatscaley" valuemin="0.01" valuemax="10" valuereset="1" template="Scale Y: {{image.splats.splatscaley:roundval(image.splats.splatscaley,-3)}}" />
				<layer style="dragcontrol" value="image.splats.splatscalez" valuemin="0.01" valuemax="10" valuereset="1" template="Scale Z: {{image.splats.splatscalez:roundval(image.splats.splatscalez,-3)}}" />
				
				<layer name="testmodel" style="control" text="Model: RGB Cube" onclick="switch_testmodel();" />
				
				<action name="switch_testmodel" scope="local">
					if(contains(image.splats.url, 'rgb_cube'),
						caller.text = 'Model: Centrale 2';
						image.reset(copy);
						image.splats.url = '%$splatspath%/central2_splat3_1_00.compressed_copyright.ply';
						set(image.splats, tx=0, ty=0, tz=0, rx=0, ry=0, rz=0);
						loadpanoimage(KEEPALL, BLEND(0.5));
						set(view, vlookat=0, tx=283, ty=-217, tz=-384, oz=0, fov=100);
					  ,contains(image.splats.url, 'central2'),
						caller.text = 'Model: Eglise Chenille';
						image.reset(copy);
						image.splats.url = '%$splatspath%/eglise_chenille_3840_4000_210.compressed.ply';
						set(image.splats, tx=0, ty=160, tz=0, rx=0, ry=-92.7, rz=0);
						loadpanoimage(KEEPALL, BLEND(0.5));
						set(view, vlookat=0, tx=0, ty=-170, tz=0, oz=0, fov=100);
					  ,contains(image.splats.url, 'eglise'),
						caller.text = 'Model: Garden';
						image.reset(copy);
						image.splats.url = '%$splatspath%/garden.compressed.ply';
						set(image.splats, tx=-87, ty=-50, tz=177.5, rx=0, ry=90, rz=30);
						loadpanoimage(KEEPALL, BLEND(0.5));
						set(view, vlookat=0, tx=0, ty=-170, tz=0, oz=0, fov=100);
					  ,
						caller.text = 'Model: RGB Cube';
						image.reset(copy);
						image.splats.url = '%CURRENTXML%/rgb_cube.splat';
						set(image.splats, tx=0, ty=0, tz=0, rx=0, ry=0, rz=0);
						loadpanoimage(KEEPALL, BLEND(0.5));
						set(view, vlookat=35, tx=0, ty=0, tz=0, oz=1100, fov=100);
					);
				</action>
			</layer>
		</layer>

	</scene>


	<layer name="introtext" keep="true"
		type="text"
		text="krpano 3D Gaussian Splatting[br]Shader Demo"
		align="center"
		enabled="false"
		bg="false"
		width="90%"
		css="color:white; font-size:30px; font-weight:bold; text-align:center;"
		txtshadow="2 4 2 0x000000 1, 4 10 20 0x000000 1"
		alpha="0"
		onloaded="tween(alpha, 1.0, 1.0); delayedcall(3.0, tween(alpha,0,1.0,remove()));"
		/>
		
	
	
	<!-- file-drop support - a little tool for quickly testing own splat models -->
	<action name="splatexamples_drop_in_support" autorun="onstart" type="js"><![CDATA[

		function preventDefault(e)
		{
			if (e.type == "dragover") e.dataTransfer.dropEffect = "copy";
			e.preventDefault();
			e.stopPropagation();
		}

		function enable_drop_in_support()
		{
			document.addEventListener("dragenter", preventDefault);
			document.addEventListener("dragover", preventDefault);
			document.addEventListener("dragleave", preventDefault);

			document.addEventListener("drop", function(e)
			{
				preventDefault(e);

				var file = e.dataTransfer.files[0];
				if (!file)
					return;
				
				var urlinfo = krpano.utils.spliturl(file.name);

				// only .splat and .ply files are supported
				var fileext = urlinfo.ext.toLowerCase();
				if (fileext != "splat" && fileext != "ply")
					return;
				
				// create a URL object
				var fileURL = URL.createObjectURL(file);

				// krpano will take the text after the '#' as filename for blob-urls
				var bloburl_with_filename = fileURL + "#" + file.name;

				// load the dropped splat model
				krpano.image.reset('copy');
				krpano.image.splats.url = bloburl_with_filename;
				krpano.actions.loadpanoimage('KEEPALL');
				
				// reset the view
				krpano.view.reset();

				// remove the URL object when leaving the pano
				krpano.events.addListener("onremovepano|once", function()
				{
					URL.revokeObjectURL(fileURL);
				});
			});
		}

		enable_drop_in_support();

	]]></action>

</krpano>