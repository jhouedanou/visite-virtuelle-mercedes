<krpano>

	<action name="makescreenshot_init" type="js" autorun="onstart" usestrictjs="false"><![CDATA[

		// count the screenshots (for the filenames)
		var makescreenshot_count = 1;

		// add a 'makescreenshot' action to krpano
		krpano.makescreenshot = function(type,screenshotwidth,screenshotheight)
		{
			if (!krpano.webGL)
			{
				krpano.actions.error("WebGL required!");
				return;
			}
		
			// if there is already a screenshot layer, remove it now
			krpano.call("removelayer(screenshot,true)");

			// make a screenshot as canvas
			var sizeinfo = {w:0, h:0};
			
			var backup = {
				limitview : krpano.view.limitview,
				fovtype : krpano.view.fovtype,
				fov : krpano.view.fov,
				fovmin : krpano.view.fovmin,
				fovmax : krpano.view.fovmax,
				maxpixelzoom : krpano.view.maxpixelzoom,
				hlookat : krpano.view.hlookat,
				vlookat : krpano.view.vlookat,
				camroll : krpano.view.camroll,
				fisheye : krpano.view.fisheye,
				architectural : krpano.view.architectural,
				tx : krpano.view.tx,
				ty : krpano.view.ty,
				tz : krpano.view.tz,
				oz : krpano.view.oz
			};
			
			
			var screenshots = [];
			
			if ( type == 'pano' )
			{
				krpano.view.limitview = "off";
				krpano.view.fovtype = "VFOV";
				krpano.view.maxpixelzoom = 0;
				krpano.view.fov = krpano.view.fovmin = krpano.view.fovmax = 90;
				krpano.view.camroll = 0;
				krpano.view.fisheye = 0;
				krpano.view.architectural = 0;
				krpano.view.tx -= krpano.view.ox_rotated;
				krpano.view.ty -= krpano.view.oy_rotated;
				krpano.view.tz -= krpano.view.oz_rotated;
				krpano.view.oz = 0;
				
				var cubesize = screenshotwidth ? 1*screenshotwidth : 256;
				
				krpano.view.hlookat = -90; krpano.view.vlookat = 0;
				screenshots.push( krpano.webGL.makeScreenshot(cubesize, cubesize, true, "canvas", 0, null, sizeinfo) );
				
				krpano.view.hlookat = 0; krpano.view.vlookat = 0;
				screenshots.push( krpano.webGL.makeScreenshot(cubesize, cubesize, true, "canvas", 0, null, sizeinfo) );
				
				krpano.view.hlookat = +90; krpano.view.vlookat = 0;
				screenshots.push( krpano.webGL.makeScreenshot(cubesize, cubesize, true, "canvas", 0, null, sizeinfo) );
				
				krpano.view.hlookat = +180; krpano.view.vlookat = 0;
				screenshots.push( krpano.webGL.makeScreenshot(cubesize, cubesize, true, "canvas", 0, null, sizeinfo) );
				
				krpano.view.hlookat = 0; krpano.view.vlookat = -90;
				screenshots.push( krpano.webGL.makeScreenshot(cubesize, cubesize, true, "canvas", 0, null, sizeinfo) );
				
				krpano.view.hlookat = 0; krpano.view.vlookat = +90;
				screenshots.push( krpano.webGL.makeScreenshot(cubesize, cubesize, true, "canvas", 0, null, sizeinfo) );
			}
			else
			{
				screenshotwidth = 1*screenshotwidth;
				screenshotheight = 1*screenshotheight;
				
				if (isNaN(screenshotwidth)) screenshotwidth = 0;
				if (isNaN(screenshotheight)) screenshotheight = 0;
			
				screenshots.push( krpano.webGL.makeScreenshot(screenshotwidth, screenshotheight, true, "canvas", 0, null, sizeinfo) );
			}

			// restore view
			Object.keys(backup).forEach(function(prop)
			{
				krpano.view[prop] = backup[prop];
			});

			
			if (screenshots.length > 0)
			{
				var imagew = sizeinfo.w;
				var imageh = sizeinfo.h * screenshots.length;
				
				var screenshotcanvas = document.createElement('canvas');
				screenshotcanvas.width = imagew;
				screenshotcanvas.height = imageh;
				
				var ctx = screenshotcanvas.getContext("2d");

				// make imagestrip/cubestrip for multiple images
				for (var i=0, yp=0; i < screenshots.length; i++)
				{
					ctx.drawImage(screenshots[i], 0, yp);
					yp += sizeinfo.h;
				}

				// add some krpano layers that show the screenshot and allow saving it
				var screenshotlayer = krpano.addlayer("screenshot");
				screenshotlayer.type = "container";
				screenshotlayer.zorder = 99;
				screenshotlayer.width = "100%";
				screenshotlayer.height = "100%";
				screenshotlayer.bgcolor = 0x000000;
				screenshotlayer.bgalpha = 0.5;
				screenshotlayer.bgblur = 5;
				screenshotlayer.bgcapture = true;
				screenshotlayer.cursor = "default";
				screenshotlayer.onclick = "enabled=false; tween(alpha,0,0.2,default,remove());";
				
				var screenshot = krpano.addlayer("screenshotimage");
				screenshot.parent = screenshotlayer.path;
				screenshot.url = screenshotcanvas.toDataURL();
				screenshot.align = "center";
				screenshot.width  = imagew > imageh ? "70%" : "prop";
				screenshot.height = imagew > imageh ? "prop" : "70%";
				screenshot.bgshadow = "0 5 40 0x000000 1.0";
				screenshot.bgborder = "12 0xFFFFFF";
				screenshot.scalemode = "resize";
				screenshot.ondown = "asyncloop(pressed, ox+=mouse.dx; oy+=mouse.dy;);";
				screenshot.capturewheel = true;
				screenshot.onwheel = "sf = (1.0 + wheeldelta_raw/10.0); scale *= sf; ox*=sf; oy*=sf;";
				
				var imageinfo = krpano.addlayer("screenshotimageinfo");
				imageinfo.parent = screenshot.path;
				imageinfo.type = "text";
				imageinfo.align = "bottom";
				imageinfo.edge = "top";
				imageinfo.y = -14;
				imageinfo.text = imagew + "x" + imageh;
				imageinfo.bg = false;
				imageinfo.css = "color:white;";
				
				var saveasbutton = krpano.addlayer("screenshotsaveasbutton");
				saveasbutton.parent = screenshotlayer.path;
				saveasbutton.type = "text";
				saveasbutton.align = "bottom";
				saveasbutton.edge = "rightbottom";
				saveasbutton.flow = false;
				saveasbutton.x = -5;
				saveasbutton.y = 20;
				saveasbutton.zorder = 2;
				saveasbutton.autoalpha = true;
				saveasbutton.bgborder = "1 0x777777";
				saveasbutton.onover = "bgcolor=0xAAAAAA;";
				saveasbutton.onout = "bgcolor=0xFFFFFF;";
				saveasbutton.padding = "6 8";
				saveasbutton.textalign = "center";
				saveasbutton.text = "Save Image";
				saveasbutton.onclick = function()
				{
					// save as JPEG with 95% quality
					screenshotcanvas.toBlob(function(blob)
					{
						krpano.saveLocalFile("screenshot" + (makescreenshot_count++) + ".jpg", blob); 
					}, 
					"image/jpeg", 0.95);
				};
				
				var clipboardbutton = krpano.addlayer("screenshottoclipboardbutton");
				clipboardbutton.parent = screenshotlayer.path;
				clipboardbutton.type = "text";
				clipboardbutton.align = "bottom";
				clipboardbutton.edge = "leftbottom";
				clipboardbutton.flow = false;
				clipboardbutton.x = 5;
				clipboardbutton.y = 20;
				clipboardbutton.zorder = 2;
				clipboardbutton.autoalpha = true;
				clipboardbutton.bgborder = "1 0x777777";
				clipboardbutton.onover = "bgcolor=0xAAAAAA;";
				clipboardbutton.onout = "bgcolor=0xFFFFFF;";
				clipboardbutton.padding = "6 8";
				clipboardbutton.textalign = "center";
				clipboardbutton.text = "Copy to Clipboard";
				clipboardbutton.onclick = function()
				{
					// only PNG is supported for copying to clipboard
					screenshotcanvas.toBlob(function(blob)
					{
    					navigator.clipboard.write([new ClipboardItem({"image/png":blob})]); 
					}, 
					"image/png");
				};
			}
		}

	]]></action>
	
</krpano>
